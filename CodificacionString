#include <iostream>

using namespace std;

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

void codificacion(string name, string nombre_salida, int method, int n);
string leer_txt(string name);
string text2bin(string texto);
string particion_y_metodo1(string binario, int n);
string particion_y_metodo2(string binario, int n);
void escribir_txt(string name, string data);
char cambio(string partido, unsigned long long int j);

int main(){
    int metodo,n;
    string nombre_entrada, nombre_salida;
    cout << "Ingrese el metodo de codificacion deseado: ";
    cin >> metodo;
    cout << "Ingrese la semilla n: ";
    cin >> n;
    cout << "Ingrese el nombre del archivo de entrada: ";
    cin>>nombre_entrada;
    cout << "Ingrese el nombre del archivo de salida: ";
    cin>>nombre_salida;
    codificacion(nombre_entrada, nombre_salida, metodo, n);
    nombre_entrada.clear();
    nombre_salida.clear();
    return 0;
}

void codificacion(string name, string nombre_salida, int method, int n)
{
    string texto, binario;
    texto=leer_txt(name);
    binario=text2bin(texto);
    string codificacion;
    if (method==1){
        codificacion= particion_y_metodo1(binario,n);
    }
    else if (method==2){
        codificacion= particion_y_metodo2(binario, n);
    }
    escribir_txt(nombre_salida, codificacion);
    cout << codificacion <<endl;
    texto.clear();
    binario.clear();
    codificacion.clear();
}

string leer_txt(string name)
{
    long long int tam;
    string data;
    fstream k(name, fstream::in | fstream::ate | fstream::binary);
    if(k.is_open()){
        tam=k.tellg();
        k.seekg(0);
        for(long long int i=0; i<tam; i++) data.push_back(k.get());
    }
    else cout << "El archivo de texto no existe" << endl;
    k.close();
    return data;
}

string text2bin(string texto)
{
    string binario;
    for(unsigned long long int i=0; i<texto.length(); i++){
        for(int j=0; j<8;j++) binario.push_back(char((((texto[i]<<j)&(0x80))/128)+48));
    }
    return binario;
}

string particion_y_metodo1(string binario, int n)
{
    int ceros=0;
    int unos=0;
    string codif;
    for(unsigned long long int i=0, k=0; i<binario.length();i++){

        if((k+1)*n-1==i || i==binario.length()-1){
            if(k==0){
                    for(unsigned long long int j=0; j<n; j++){
                        codif.push_back(cambio(binario,j+k*n));
                    }
            }

            else{
                if(unos==ceros){
                       for(unsigned long long int j=0; j<n; j++){
                            codif.push_back(cambio(binario,j+k*n));
                    }
                }

                else if(unos<ceros){
                    for(unsigned long long int j=0; j<n; j++){
                        if((j+1)%2==0){
                            codif.push_back(cambio(binario,j+k*n));
                         }
                         else{
                         codif.push_back(binario[j+k*n]);
                         }
                    }
                }
                else{
                    for(unsigned long long int j=0; j<n; j++){
                    if((j+1)%3==0){
                        codif.push_back(cambio(binario,j+k*n));
                }
                else{
                    codif.push_back(binario[j+k*n]);
                }
            }
        }
    }

    ceros=0;
    unos=0;

    for(unsigned long long int m=0;m<n;m++){
        if (binario[m+k*n]=='1'){
            unos++;
        }
        else {
            ceros++;
        }
        }
    k++;
    }
    }
    return codif;
}


string particion_y_metodo2(string binario, int n)
{
    unsigned long long int longitud;
    longitud=binario.length();
    string codif; //Almacena el binario codificado

    for(unsigned long long int i=0, k=0; i<binario.length();i++){       //k es el número de bloques que ya se han evaluado

        codif.push_back('A');

        if((k+1)*n-1==i){       //Verificación para cuando se llena el arreglo partido

            for(int j=0; j<n ; j++){
                if(j==(n-1)){
                    codif[k*n]=binario[j+k*n];
                }
                else{
                    codif[k*n+j+1]=binario[j+k*n];
                }
            }
            k++;
        }
    }
    return codif;
}

void escribir_txt(string name, string data)
{
    fstream k(name, fstream::out | fstream::binary);
    k.write(data.c_str(), data.length());
    k.close();
}

char cambio(string partido, unsigned long long int j){
    char agregar;
    if(partido[j]=='1'){
        agregar='0';
    }
    else {
        agregar='1';
    }
    return agregar;
}
